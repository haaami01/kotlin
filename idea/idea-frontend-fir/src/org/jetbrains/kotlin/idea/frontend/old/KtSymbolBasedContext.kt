/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.frontend.old

import com.intellij.openapi.application.ApplicationManager
import com.intellij.openapi.project.Project
import org.jetbrains.kotlin.builtins.DefaultBuiltIns
import org.jetbrains.kotlin.builtins.KotlinBuiltIns
import org.jetbrains.kotlin.descriptors.*
import org.jetbrains.kotlin.descriptors.annotations.Annotations
import org.jetbrains.kotlin.idea.caches.project.IdeaModuleInfo
import org.jetbrains.kotlin.idea.caches.project.getModuleInfo
import org.jetbrains.kotlin.idea.fir.low.level.api.api.getResolveState
import org.jetbrains.kotlin.idea.frontend.api.*
import org.jetbrains.kotlin.idea.frontend.api.fir.KtFirAnalysisSession
import org.jetbrains.kotlin.idea.frontend.api.symbols.*
import org.jetbrains.kotlin.idea.frontend.api.tokens.HackToForceAllowRunningAnalyzeOnEDT
import org.jetbrains.kotlin.idea.frontend.api.tokens.ValidityToken
import org.jetbrains.kotlin.name.FqName
import org.jetbrains.kotlin.name.Name
import org.jetbrains.kotlin.platform.TargetPlatform
import org.jetbrains.kotlin.psi.KtElement
import org.jetbrains.kotlin.trackers.createProjectWideOutOfBlockModificationTracker
import org.jetbrains.kotlin.utils.addToStdlib.safeAs

interface KtSymbolBasedContext {
    val builtIns: KotlinBuiltIns
    val ktAnalysisSession: KtAnalysisSession
    val moduleDescriptor: ModuleDescriptor

    /**
     * Legend:
     *  - where was decided, that KtSymbolBased descriptor is not support method, noImplementation() method is called.
     *  - where the implementation planned, but not yet here: implementationPlanned()
     *  - if there is no simple implementation and it isn't clear if it really needed -- implementationPostponed()
     *  - if there were no investigation -- autogenerated TODO("not implemented") called
     *  - if we could implement it right now, but not entirely correct -- wrap it into incorrect implementation
     */
    fun noImplementation(additionalInfo: String = ""): Nothing
    fun implementationPostponed(additionalInfo: String = ""): Nothing
    fun implementationPlanned(additionalInfo: String = ""): Nothing

    fun <R> incorrectImplementation(block: () -> R) = block()
}

fun KtSymbol.toDeclarationDescriptor(context: KtSymbolBasedContext): DeclarationDescriptor =
    when (this) {
        is KtNamedClassOrObjectSymbol -> KtSymbolBasedClassDescriptor(this, context)
        is KtFunctionLikeSymbol -> toDeclarationDescriptor(context)
        is KtValueParameterSymbol -> {
            val containingSymbol = context.withAnalysisSession { this@toDeclarationDescriptor.getContainingSymbol() }
            check(containingSymbol is KtFunctionLikeSymbol) {
                "Unexpected containing symbol = $containingSymbol"
            }
            KtSymbolBasedValueParameterDescriptor(this, context, containingSymbol.toDeclarationDescriptor(context))
        }
        else -> context.implementationPlanned()
    }

fun KtFunctionLikeSymbol.toDeclarationDescriptor(context: KtSymbolBasedContext): KtSymbolBasedFunctionLikeDescriptor =
    when (this) {
        is KtFunctionSymbol -> KtSymbolBasedFunctionDescriptor(this, context)
        is KtAnonymousFunctionSymbol -> KtSymbolBasedAnonymousFunctionDescriptor(this, context)
        is KtConstructorSymbol -> {
            val ktConstructorSymbol = this
            val ktClassOrObject = context.withAnalysisSession { ktConstructorSymbol.getContainingSymbol() as KtNamedClassOrObjectSymbol }
            KtSymbolBasedConstructorDescriptor(ktConstructorSymbol, KtSymbolBasedClassDescriptor(ktClassOrObject, context))
        }
        else -> error("Unexpected kind of KtFunctionLikeSymbol: ${this.javaClass}")
    }

inline fun <R> KtSymbolBasedContext.withAnalysisSession(f: KtAnalysisSession.() -> R): R = f(ktAnalysisSession)

class KtSymbolBasedContextImpl(
    val project: Project,
    val ktElement: KtElement
) : KtSymbolBasedContext {
    private val token: ValidityToken = ValidityTokenForKtSymbolBasedWrappers(project)

    private val moduleInfo = ktElement.getModuleInfo()

    override val ktAnalysisSession: KtAnalysisSession =
        @OptIn(InvalidWayOfUsingAnalysisSession::class)
        KtFirAnalysisSession.createAnalysisSessionByResolveState(ktElement.getResolveState(), token)

    override val moduleDescriptor: ModuleDescriptor = KtSymbolBasedModuleDescriptorImpl(this, moduleInfo)

    override val builtIns: KotlinBuiltIns
        get() = incorrectImplementation { DefaultBuiltIns.Instance }

    override fun noImplementation(additionalInfo: String): Nothing =
        error("This method should not be called for wrappers. $additionalInfo")

    override fun implementationPostponed(additionalInfo: String): Nothing =
        TODO("InvestigateLater and implement if needed. $additionalInfo")

    override fun implementationPlanned(additionalInfo: String): Nothing =
        TODO("SE_to_implement. $additionalInfo")
}

private class ValidityTokenForKtSymbolBasedWrappers(val project: Project) : ValidityToken() {
    private val modificationTracker = project.createProjectWideOutOfBlockModificationTracker()
    private val onCreatedTimeStamp = modificationTracker.modificationCount

    override fun isValid(): Boolean {
        return true
    }

    override fun getInvalidationReason(): String {
        if (onCreatedTimeStamp != modificationTracker.modificationCount) return "PSI has changed since creation"
        error("Getting invalidation reason for valid validity token")
    }

    override fun isAccessible(): Boolean = true

    @OptIn(HackToForceAllowRunningAnalyzeOnEDT::class)
    override fun getInaccessibilityReason(): String = error("Getting inaccessibility reason for validity token when it is accessible")
}

private class KtSymbolBasedModuleDescriptorImpl(
    val context: KtSymbolBasedContext,
    val moduleInfo: IdeaModuleInfo
) : ModuleDescriptor {
    override val builtIns: KotlinBuiltIns
        get() = context.builtIns

    override val stableName: Name?
        get() = context.noImplementation()
    override val platform: TargetPlatform?
        get() = moduleInfo.platform

    override fun shouldSeeInternalsOf(targetModule: ModuleDescriptor): Boolean = context.noImplementation()
    override fun getPackage(fqName: FqName): PackageViewDescriptor = context.noImplementation()
    override fun getSubPackagesOf(fqName: FqName, nameFilter: (Name) -> Boolean): Collection<FqName> = context.noImplementation()

    override val allDependencyModules: List<ModuleDescriptor>
        get() = context.implementationPostponed()
    override val expectedByModules: List<ModuleDescriptor>
        get() = context.implementationPostponed()
    override val allExpectedByModules: Set<ModuleDescriptor>
        get() = context.implementationPostponed()

    override fun <T> getCapability(capability: ModuleCapability<T>): T? = null

    override val isValid: Boolean
        get() = context.ktAnalysisSession.token.isValid()

    override fun assertValid() {
        assert(context.ktAnalysisSession.token.isValid())
    }

    override fun getName(): Name = moduleInfo.name

    override fun getOriginal(): DeclarationDescriptor = this

    override fun acceptVoid(visitor: DeclarationDescriptorVisitor<Void, Void>?) = context.noImplementation()

    override val annotations: Annotations
        get() = context.incorrectImplementation { Annotations.EMPTY }

}